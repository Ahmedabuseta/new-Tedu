generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  phoneNumber   String?
  image         String?
  password      String
  accounts      Account[]
  role          Role      @default(USER)

  bio       String?
  twitter   String?
  facebook  String?
  linkedin  String?
  youtube   String?
  instagram String?

  stripeCustomerId String?

  Comment Comment[]
  Reply   Reply[]
  Rating  Rating[]

  Invitation         Invitation[]
  inviteToken        String?              @unique @db.Text
  activatedInvite    Boolean?             @default(false)
  invitedBy          String?
  Wallet Wallet[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([email, inviteToken])
}

enum Role {
  USER
  ADMIN
  INSTRUCTOR
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  replies   Reply[]

  @@index([userId])
  @@index([courseId])
}

model Reply {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])

  @@index([userId])
  @@index([commentId])
}

model Invitation {
  id     String @id @default(uuid())
  email  String
  active Boolean @default(false)
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}
model Commission {
  id        String      @id @default(uuid())
  rate      Float
  startDate DateTime @default(now())
  endDate   DateTime?
}

model Rating {
  id       String @id @default(uuid())
  value    Int
  userId   String
  courseId String
  user     User   @relation(fields: [userId], references: [id])
  course   Course @relation(fields: [courseId], references: [id])

  @@index([userId])
  @@index([courseId])
}

model Wallet {
  id              String            @id @default(uuid())
  userId          String
  currentBalance  Float          @default(0)
  pendingBalance  Float          @default(0)
  totalEarnings   Float          @default(0)
  transactions    Transaction[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  User            User           @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Transaction {
  id          String        @id @default(uuid())
  walletId    String
  // type        TransactionType
  amount      Float
  status      TransactionStatus
  description String
  createdAt   DateTime   @default(now())

  Wallet      Wallet     @relation(fields: [walletId], references: [id])

  @@index([walletId])
}
// enum TransactionType {
//   CREDIT
//   DEBIT
// }

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  categoryId  String?
  category    Category?     @relation(fields: [categoryId], references: [id])
  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]
  Comment     Comment[]
  Rating      Rating[]
  
  routeId  String?
  route    Route?    @relation(fields: [routeId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()
  // @@fulltext([title])

  @@index([categoryId])
  @@index([routeId])
}

model Route {
  id        String        @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)
  courses Course[]
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model RouteCourse {
//   id        String   @id @default(uuid())
//   routeId   String
//   courseId  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   route  Route  @relation(fields: [routeId], references: [id])
//   course Course @relation(fields: [courseId], references: [id])

//   @@unique([routeId, courseId])
//   @@index([courseId])
// }

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id       String  @id @default(uuid())
  userId   String
  courseId String?
  routeId  String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  route    Route?  @relation(fields: [routeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@unique([userId, routeId])
  @@index([courseId])
  @@index([routeId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
